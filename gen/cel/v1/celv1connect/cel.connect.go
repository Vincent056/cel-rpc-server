// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cel/v1/cel.proto

package celv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Vincent056/cel-rpc-server/gen/cel/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CELValidationServiceName is the fully-qualified name of the CELValidationService service.
	CELValidationServiceName = "cel.v1.CELValidationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CELValidationServiceValidateCELProcedure is the fully-qualified name of the
	// CELValidationService's ValidateCEL RPC.
	CELValidationServiceValidateCELProcedure = "/cel.v1.CELValidationService/ValidateCEL"
	// CELValidationServiceValidateCELStreamProcedure is the fully-qualified name of the
	// CELValidationService's ValidateCELStream RPC.
	CELValidationServiceValidateCELStreamProcedure = "/cel.v1.CELValidationService/ValidateCELStream"
	// CELValidationServiceDiscoverResourcesProcedure is the fully-qualified name of the
	// CELValidationService's DiscoverResources RPC.
	CELValidationServiceDiscoverResourcesProcedure = "/cel.v1.CELValidationService/DiscoverResources"
	// CELValidationServiceExecuteAgentTaskProcedure is the fully-qualified name of the
	// CELValidationService's ExecuteAgentTask RPC.
	CELValidationServiceExecuteAgentTaskProcedure = "/cel.v1.CELValidationService/ExecuteAgentTask"
	// CELValidationServiceChatAssistProcedure is the fully-qualified name of the CELValidationService's
	// ChatAssist RPC.
	CELValidationServiceChatAssistProcedure = "/cel.v1.CELValidationService/ChatAssist"
	// CELValidationServiceSaveRuleProcedure is the fully-qualified name of the CELValidationService's
	// SaveRule RPC.
	CELValidationServiceSaveRuleProcedure = "/cel.v1.CELValidationService/SaveRule"
	// CELValidationServiceGetRuleProcedure is the fully-qualified name of the CELValidationService's
	// GetRule RPC.
	CELValidationServiceGetRuleProcedure = "/cel.v1.CELValidationService/GetRule"
	// CELValidationServiceListRulesProcedure is the fully-qualified name of the CELValidationService's
	// ListRules RPC.
	CELValidationServiceListRulesProcedure = "/cel.v1.CELValidationService/ListRules"
	// CELValidationServiceUpdateRuleProcedure is the fully-qualified name of the CELValidationService's
	// UpdateRule RPC.
	CELValidationServiceUpdateRuleProcedure = "/cel.v1.CELValidationService/UpdateRule"
	// CELValidationServiceDeleteRuleProcedure is the fully-qualified name of the CELValidationService's
	// DeleteRule RPC.
	CELValidationServiceDeleteRuleProcedure = "/cel.v1.CELValidationService/DeleteRule"
	// CELValidationServiceExportRulesProcedure is the fully-qualified name of the
	// CELValidationService's ExportRules RPC.
	CELValidationServiceExportRulesProcedure = "/cel.v1.CELValidationService/ExportRules"
	// CELValidationServiceImportRulesProcedure is the fully-qualified name of the
	// CELValidationService's ImportRules RPC.
	CELValidationServiceImportRulesProcedure = "/cel.v1.CELValidationService/ImportRules"
	// CELValidationServiceValidateRuleWithTestCasesProcedure is the fully-qualified name of the
	// CELValidationService's ValidateRuleWithTestCases RPC.
	CELValidationServiceValidateRuleWithTestCasesProcedure = "/cel.v1.CELValidationService/ValidateRuleWithTestCases"
)

// CELValidationServiceClient is a client for the cel.v1.CELValidationService service.
type CELValidationServiceClient interface {
	ValidateCEL(context.Context, *connect.Request[v1.ValidateCELRequest]) (*connect.Response[v1.ValidationResponse], error)
	// ValidateCELStream provides bidirectional streaming for real-time validation
	ValidateCELStream(context.Context) *connect.BidiStreamForClient[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse]
	DiscoverResources(context.Context, *connect.Request[v1.DiscoverResourcesRequest]) (*connect.Response[v1.ResourceDiscoveryResponse], error)
	ExecuteAgentTask(context.Context, *connect.Request[v1.AgentExecutionRequest]) (*connect.Response[v1.AgentExecutionResponse], error)
	// ChatAssist provides server streaming for AI-assisted CEL rule generation and validation
	ChatAssist(context.Context, *connect.Request[v1.ChatAssistRequest]) (*connect.ServerStreamForClient[v1.ChatAssistResponse], error)
	// Rule Library Operations
	SaveRule(context.Context, *connect.Request[v1.SaveRuleRequest]) (*connect.Response[v1.SaveRuleResponse], error)
	GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error)
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
	ExportRules(context.Context, *connect.Request[v1.ExportRulesRequest]) (*connect.Response[v1.ExportRulesResponse], error)
	ImportRules(context.Context, *connect.Request[v1.ImportRulesRequest]) (*connect.Response[v1.ImportRulesResponse], error)
	ValidateRuleWithTestCases(context.Context, *connect.Request[v1.ValidateRuleWithTestCasesRequest]) (*connect.Response[v1.ValidateRuleWithTestCasesResponse], error)
}

// NewCELValidationServiceClient constructs a client for the cel.v1.CELValidationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCELValidationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CELValidationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cELValidationServiceMethods := v1.File_cel_v1_cel_proto.Services().ByName("CELValidationService").Methods()
	return &cELValidationServiceClient{
		validateCEL: connect.NewClient[v1.ValidateCELRequest, v1.ValidationResponse](
			httpClient,
			baseURL+CELValidationServiceValidateCELProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ValidateCEL")),
			connect.WithClientOptions(opts...),
		),
		validateCELStream: connect.NewClient[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse](
			httpClient,
			baseURL+CELValidationServiceValidateCELStreamProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ValidateCELStream")),
			connect.WithClientOptions(opts...),
		),
		discoverResources: connect.NewClient[v1.DiscoverResourcesRequest, v1.ResourceDiscoveryResponse](
			httpClient,
			baseURL+CELValidationServiceDiscoverResourcesProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("DiscoverResources")),
			connect.WithClientOptions(opts...),
		),
		executeAgentTask: connect.NewClient[v1.AgentExecutionRequest, v1.AgentExecutionResponse](
			httpClient,
			baseURL+CELValidationServiceExecuteAgentTaskProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ExecuteAgentTask")),
			connect.WithClientOptions(opts...),
		),
		chatAssist: connect.NewClient[v1.ChatAssistRequest, v1.ChatAssistResponse](
			httpClient,
			baseURL+CELValidationServiceChatAssistProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ChatAssist")),
			connect.WithClientOptions(opts...),
		),
		saveRule: connect.NewClient[v1.SaveRuleRequest, v1.SaveRuleResponse](
			httpClient,
			baseURL+CELValidationServiceSaveRuleProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("SaveRule")),
			connect.WithClientOptions(opts...),
		),
		getRule: connect.NewClient[v1.GetRuleRequest, v1.GetRuleResponse](
			httpClient,
			baseURL+CELValidationServiceGetRuleProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("GetRule")),
			connect.WithClientOptions(opts...),
		),
		listRules: connect.NewClient[v1.ListRulesRequest, v1.ListRulesResponse](
			httpClient,
			baseURL+CELValidationServiceListRulesProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ListRules")),
			connect.WithClientOptions(opts...),
		),
		updateRule: connect.NewClient[v1.UpdateRuleRequest, v1.UpdateRuleResponse](
			httpClient,
			baseURL+CELValidationServiceUpdateRuleProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("UpdateRule")),
			connect.WithClientOptions(opts...),
		),
		deleteRule: connect.NewClient[v1.DeleteRuleRequest, v1.DeleteRuleResponse](
			httpClient,
			baseURL+CELValidationServiceDeleteRuleProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("DeleteRule")),
			connect.WithClientOptions(opts...),
		),
		exportRules: connect.NewClient[v1.ExportRulesRequest, v1.ExportRulesResponse](
			httpClient,
			baseURL+CELValidationServiceExportRulesProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ExportRules")),
			connect.WithClientOptions(opts...),
		),
		importRules: connect.NewClient[v1.ImportRulesRequest, v1.ImportRulesResponse](
			httpClient,
			baseURL+CELValidationServiceImportRulesProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ImportRules")),
			connect.WithClientOptions(opts...),
		),
		validateRuleWithTestCases: connect.NewClient[v1.ValidateRuleWithTestCasesRequest, v1.ValidateRuleWithTestCasesResponse](
			httpClient,
			baseURL+CELValidationServiceValidateRuleWithTestCasesProcedure,
			connect.WithSchema(cELValidationServiceMethods.ByName("ValidateRuleWithTestCases")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cELValidationServiceClient implements CELValidationServiceClient.
type cELValidationServiceClient struct {
	validateCEL               *connect.Client[v1.ValidateCELRequest, v1.ValidationResponse]
	validateCELStream         *connect.Client[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse]
	discoverResources         *connect.Client[v1.DiscoverResourcesRequest, v1.ResourceDiscoveryResponse]
	executeAgentTask          *connect.Client[v1.AgentExecutionRequest, v1.AgentExecutionResponse]
	chatAssist                *connect.Client[v1.ChatAssistRequest, v1.ChatAssistResponse]
	saveRule                  *connect.Client[v1.SaveRuleRequest, v1.SaveRuleResponse]
	getRule                   *connect.Client[v1.GetRuleRequest, v1.GetRuleResponse]
	listRules                 *connect.Client[v1.ListRulesRequest, v1.ListRulesResponse]
	updateRule                *connect.Client[v1.UpdateRuleRequest, v1.UpdateRuleResponse]
	deleteRule                *connect.Client[v1.DeleteRuleRequest, v1.DeleteRuleResponse]
	exportRules               *connect.Client[v1.ExportRulesRequest, v1.ExportRulesResponse]
	importRules               *connect.Client[v1.ImportRulesRequest, v1.ImportRulesResponse]
	validateRuleWithTestCases *connect.Client[v1.ValidateRuleWithTestCasesRequest, v1.ValidateRuleWithTestCasesResponse]
}

// ValidateCEL calls cel.v1.CELValidationService.ValidateCEL.
func (c *cELValidationServiceClient) ValidateCEL(ctx context.Context, req *connect.Request[v1.ValidateCELRequest]) (*connect.Response[v1.ValidationResponse], error) {
	return c.validateCEL.CallUnary(ctx, req)
}

// ValidateCELStream calls cel.v1.CELValidationService.ValidateCELStream.
func (c *cELValidationServiceClient) ValidateCELStream(ctx context.Context) *connect.BidiStreamForClient[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse] {
	return c.validateCELStream.CallBidiStream(ctx)
}

// DiscoverResources calls cel.v1.CELValidationService.DiscoverResources.
func (c *cELValidationServiceClient) DiscoverResources(ctx context.Context, req *connect.Request[v1.DiscoverResourcesRequest]) (*connect.Response[v1.ResourceDiscoveryResponse], error) {
	return c.discoverResources.CallUnary(ctx, req)
}

// ExecuteAgentTask calls cel.v1.CELValidationService.ExecuteAgentTask.
func (c *cELValidationServiceClient) ExecuteAgentTask(ctx context.Context, req *connect.Request[v1.AgentExecutionRequest]) (*connect.Response[v1.AgentExecutionResponse], error) {
	return c.executeAgentTask.CallUnary(ctx, req)
}

// ChatAssist calls cel.v1.CELValidationService.ChatAssist.
func (c *cELValidationServiceClient) ChatAssist(ctx context.Context, req *connect.Request[v1.ChatAssistRequest]) (*connect.ServerStreamForClient[v1.ChatAssistResponse], error) {
	return c.chatAssist.CallServerStream(ctx, req)
}

// SaveRule calls cel.v1.CELValidationService.SaveRule.
func (c *cELValidationServiceClient) SaveRule(ctx context.Context, req *connect.Request[v1.SaveRuleRequest]) (*connect.Response[v1.SaveRuleResponse], error) {
	return c.saveRule.CallUnary(ctx, req)
}

// GetRule calls cel.v1.CELValidationService.GetRule.
func (c *cELValidationServiceClient) GetRule(ctx context.Context, req *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error) {
	return c.getRule.CallUnary(ctx, req)
}

// ListRules calls cel.v1.CELValidationService.ListRules.
func (c *cELValidationServiceClient) ListRules(ctx context.Context, req *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return c.listRules.CallUnary(ctx, req)
}

// UpdateRule calls cel.v1.CELValidationService.UpdateRule.
func (c *cELValidationServiceClient) UpdateRule(ctx context.Context, req *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return c.updateRule.CallUnary(ctx, req)
}

// DeleteRule calls cel.v1.CELValidationService.DeleteRule.
func (c *cELValidationServiceClient) DeleteRule(ctx context.Context, req *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return c.deleteRule.CallUnary(ctx, req)
}

// ExportRules calls cel.v1.CELValidationService.ExportRules.
func (c *cELValidationServiceClient) ExportRules(ctx context.Context, req *connect.Request[v1.ExportRulesRequest]) (*connect.Response[v1.ExportRulesResponse], error) {
	return c.exportRules.CallUnary(ctx, req)
}

// ImportRules calls cel.v1.CELValidationService.ImportRules.
func (c *cELValidationServiceClient) ImportRules(ctx context.Context, req *connect.Request[v1.ImportRulesRequest]) (*connect.Response[v1.ImportRulesResponse], error) {
	return c.importRules.CallUnary(ctx, req)
}

// ValidateRuleWithTestCases calls cel.v1.CELValidationService.ValidateRuleWithTestCases.
func (c *cELValidationServiceClient) ValidateRuleWithTestCases(ctx context.Context, req *connect.Request[v1.ValidateRuleWithTestCasesRequest]) (*connect.Response[v1.ValidateRuleWithTestCasesResponse], error) {
	return c.validateRuleWithTestCases.CallUnary(ctx, req)
}

// CELValidationServiceHandler is an implementation of the cel.v1.CELValidationService service.
type CELValidationServiceHandler interface {
	ValidateCEL(context.Context, *connect.Request[v1.ValidateCELRequest]) (*connect.Response[v1.ValidationResponse], error)
	// ValidateCELStream provides bidirectional streaming for real-time validation
	ValidateCELStream(context.Context, *connect.BidiStream[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse]) error
	DiscoverResources(context.Context, *connect.Request[v1.DiscoverResourcesRequest]) (*connect.Response[v1.ResourceDiscoveryResponse], error)
	ExecuteAgentTask(context.Context, *connect.Request[v1.AgentExecutionRequest]) (*connect.Response[v1.AgentExecutionResponse], error)
	// ChatAssist provides server streaming for AI-assisted CEL rule generation and validation
	ChatAssist(context.Context, *connect.Request[v1.ChatAssistRequest], *connect.ServerStream[v1.ChatAssistResponse]) error
	// Rule Library Operations
	SaveRule(context.Context, *connect.Request[v1.SaveRuleRequest]) (*connect.Response[v1.SaveRuleResponse], error)
	GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error)
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
	ExportRules(context.Context, *connect.Request[v1.ExportRulesRequest]) (*connect.Response[v1.ExportRulesResponse], error)
	ImportRules(context.Context, *connect.Request[v1.ImportRulesRequest]) (*connect.Response[v1.ImportRulesResponse], error)
	ValidateRuleWithTestCases(context.Context, *connect.Request[v1.ValidateRuleWithTestCasesRequest]) (*connect.Response[v1.ValidateRuleWithTestCasesResponse], error)
}

// NewCELValidationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCELValidationServiceHandler(svc CELValidationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cELValidationServiceMethods := v1.File_cel_v1_cel_proto.Services().ByName("CELValidationService").Methods()
	cELValidationServiceValidateCELHandler := connect.NewUnaryHandler(
		CELValidationServiceValidateCELProcedure,
		svc.ValidateCEL,
		connect.WithSchema(cELValidationServiceMethods.ByName("ValidateCEL")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceValidateCELStreamHandler := connect.NewBidiStreamHandler(
		CELValidationServiceValidateCELStreamProcedure,
		svc.ValidateCELStream,
		connect.WithSchema(cELValidationServiceMethods.ByName("ValidateCELStream")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceDiscoverResourcesHandler := connect.NewUnaryHandler(
		CELValidationServiceDiscoverResourcesProcedure,
		svc.DiscoverResources,
		connect.WithSchema(cELValidationServiceMethods.ByName("DiscoverResources")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceExecuteAgentTaskHandler := connect.NewUnaryHandler(
		CELValidationServiceExecuteAgentTaskProcedure,
		svc.ExecuteAgentTask,
		connect.WithSchema(cELValidationServiceMethods.ByName("ExecuteAgentTask")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceChatAssistHandler := connect.NewServerStreamHandler(
		CELValidationServiceChatAssistProcedure,
		svc.ChatAssist,
		connect.WithSchema(cELValidationServiceMethods.ByName("ChatAssist")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceSaveRuleHandler := connect.NewUnaryHandler(
		CELValidationServiceSaveRuleProcedure,
		svc.SaveRule,
		connect.WithSchema(cELValidationServiceMethods.ByName("SaveRule")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceGetRuleHandler := connect.NewUnaryHandler(
		CELValidationServiceGetRuleProcedure,
		svc.GetRule,
		connect.WithSchema(cELValidationServiceMethods.ByName("GetRule")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceListRulesHandler := connect.NewUnaryHandler(
		CELValidationServiceListRulesProcedure,
		svc.ListRules,
		connect.WithSchema(cELValidationServiceMethods.ByName("ListRules")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceUpdateRuleHandler := connect.NewUnaryHandler(
		CELValidationServiceUpdateRuleProcedure,
		svc.UpdateRule,
		connect.WithSchema(cELValidationServiceMethods.ByName("UpdateRule")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceDeleteRuleHandler := connect.NewUnaryHandler(
		CELValidationServiceDeleteRuleProcedure,
		svc.DeleteRule,
		connect.WithSchema(cELValidationServiceMethods.ByName("DeleteRule")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceExportRulesHandler := connect.NewUnaryHandler(
		CELValidationServiceExportRulesProcedure,
		svc.ExportRules,
		connect.WithSchema(cELValidationServiceMethods.ByName("ExportRules")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceImportRulesHandler := connect.NewUnaryHandler(
		CELValidationServiceImportRulesProcedure,
		svc.ImportRules,
		connect.WithSchema(cELValidationServiceMethods.ByName("ImportRules")),
		connect.WithHandlerOptions(opts...),
	)
	cELValidationServiceValidateRuleWithTestCasesHandler := connect.NewUnaryHandler(
		CELValidationServiceValidateRuleWithTestCasesProcedure,
		svc.ValidateRuleWithTestCases,
		connect.WithSchema(cELValidationServiceMethods.ByName("ValidateRuleWithTestCases")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cel.v1.CELValidationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CELValidationServiceValidateCELProcedure:
			cELValidationServiceValidateCELHandler.ServeHTTP(w, r)
		case CELValidationServiceValidateCELStreamProcedure:
			cELValidationServiceValidateCELStreamHandler.ServeHTTP(w, r)
		case CELValidationServiceDiscoverResourcesProcedure:
			cELValidationServiceDiscoverResourcesHandler.ServeHTTP(w, r)
		case CELValidationServiceExecuteAgentTaskProcedure:
			cELValidationServiceExecuteAgentTaskHandler.ServeHTTP(w, r)
		case CELValidationServiceChatAssistProcedure:
			cELValidationServiceChatAssistHandler.ServeHTTP(w, r)
		case CELValidationServiceSaveRuleProcedure:
			cELValidationServiceSaveRuleHandler.ServeHTTP(w, r)
		case CELValidationServiceGetRuleProcedure:
			cELValidationServiceGetRuleHandler.ServeHTTP(w, r)
		case CELValidationServiceListRulesProcedure:
			cELValidationServiceListRulesHandler.ServeHTTP(w, r)
		case CELValidationServiceUpdateRuleProcedure:
			cELValidationServiceUpdateRuleHandler.ServeHTTP(w, r)
		case CELValidationServiceDeleteRuleProcedure:
			cELValidationServiceDeleteRuleHandler.ServeHTTP(w, r)
		case CELValidationServiceExportRulesProcedure:
			cELValidationServiceExportRulesHandler.ServeHTTP(w, r)
		case CELValidationServiceImportRulesProcedure:
			cELValidationServiceImportRulesHandler.ServeHTTP(w, r)
		case CELValidationServiceValidateRuleWithTestCasesProcedure:
			cELValidationServiceValidateRuleWithTestCasesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCELValidationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCELValidationServiceHandler struct{}

func (UnimplementedCELValidationServiceHandler) ValidateCEL(context.Context, *connect.Request[v1.ValidateCELRequest]) (*connect.Response[v1.ValidationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ValidateCEL is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ValidateCELStream(context.Context, *connect.BidiStream[v1.ValidateCELStreamRequest, v1.ValidateCELStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ValidateCELStream is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) DiscoverResources(context.Context, *connect.Request[v1.DiscoverResourcesRequest]) (*connect.Response[v1.ResourceDiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.DiscoverResources is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ExecuteAgentTask(context.Context, *connect.Request[v1.AgentExecutionRequest]) (*connect.Response[v1.AgentExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ExecuteAgentTask is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ChatAssist(context.Context, *connect.Request[v1.ChatAssistRequest], *connect.ServerStream[v1.ChatAssistResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ChatAssist is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) SaveRule(context.Context, *connect.Request[v1.SaveRuleRequest]) (*connect.Response[v1.SaveRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.SaveRule is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) GetRule(context.Context, *connect.Request[v1.GetRuleRequest]) (*connect.Response[v1.GetRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.GetRule is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ListRules is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.UpdateRule is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.DeleteRule is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ExportRules(context.Context, *connect.Request[v1.ExportRulesRequest]) (*connect.Response[v1.ExportRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ExportRules is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ImportRules(context.Context, *connect.Request[v1.ImportRulesRequest]) (*connect.Response[v1.ImportRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ImportRules is not implemented"))
}

func (UnimplementedCELValidationServiceHandler) ValidateRuleWithTestCases(context.Context, *connect.Request[v1.ValidateRuleWithTestCasesRequest]) (*connect.Response[v1.ValidateRuleWithTestCasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.CELValidationService.ValidateRuleWithTestCases is not implemented"))
}
