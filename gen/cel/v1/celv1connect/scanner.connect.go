// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cel/v1/scanner.proto

package celv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Vincent056/cel-rpc-server/gen/cel/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScannerResultServiceName is the fully-qualified name of the ScannerResultService service.
	ScannerResultServiceName = "cel.v1.ScannerResultService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScannerResultServiceStreamResultsProcedure is the fully-qualified name of the
	// ScannerResultService's StreamResults RPC.
	ScannerResultServiceStreamResultsProcedure = "/cel.v1.ScannerResultService/StreamResults"
)

// ScannerResultServiceClient is a client for the cel.v1.ScannerResultService service.
type ScannerResultServiceClient interface {
	// StreamResults streams scan results as they are evaluated
	StreamResults(context.Context) *connect.ClientStreamForClient[v1.ScanResultReport, v1.ScanResultResponse]
}

// NewScannerResultServiceClient constructs a client for the cel.v1.ScannerResultService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScannerResultServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScannerResultServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scannerResultServiceMethods := v1.File_cel_v1_scanner_proto.Services().ByName("ScannerResultService").Methods()
	return &scannerResultServiceClient{
		streamResults: connect.NewClient[v1.ScanResultReport, v1.ScanResultResponse](
			httpClient,
			baseURL+ScannerResultServiceStreamResultsProcedure,
			connect.WithSchema(scannerResultServiceMethods.ByName("StreamResults")),
			connect.WithClientOptions(opts...),
		),
	}
}

// scannerResultServiceClient implements ScannerResultServiceClient.
type scannerResultServiceClient struct {
	streamResults *connect.Client[v1.ScanResultReport, v1.ScanResultResponse]
}

// StreamResults calls cel.v1.ScannerResultService.StreamResults.
func (c *scannerResultServiceClient) StreamResults(ctx context.Context) *connect.ClientStreamForClient[v1.ScanResultReport, v1.ScanResultResponse] {
	return c.streamResults.CallClientStream(ctx)
}

// ScannerResultServiceHandler is an implementation of the cel.v1.ScannerResultService service.
type ScannerResultServiceHandler interface {
	// StreamResults streams scan results as they are evaluated
	StreamResults(context.Context, *connect.ClientStream[v1.ScanResultReport]) (*connect.Response[v1.ScanResultResponse], error)
}

// NewScannerResultServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScannerResultServiceHandler(svc ScannerResultServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scannerResultServiceMethods := v1.File_cel_v1_scanner_proto.Services().ByName("ScannerResultService").Methods()
	scannerResultServiceStreamResultsHandler := connect.NewClientStreamHandler(
		ScannerResultServiceStreamResultsProcedure,
		svc.StreamResults,
		connect.WithSchema(scannerResultServiceMethods.ByName("StreamResults")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cel.v1.ScannerResultService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScannerResultServiceStreamResultsProcedure:
			scannerResultServiceStreamResultsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScannerResultServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScannerResultServiceHandler struct{}

func (UnimplementedScannerResultServiceHandler) StreamResults(context.Context, *connect.ClientStream[v1.ScanResultReport]) (*connect.Response[v1.ScanResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cel.v1.ScannerResultService.StreamResults is not implemented"))
}
